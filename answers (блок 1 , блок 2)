1.1.1 Сформулируйте SQL запрос для создания таблицы book, занесите  его в окно кода (расположено ниже)  и отправьте на проверку (кнопка Отправить). Структура таблицы book:

CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL (8.2),
    amount INT
)

1.1.2 Занесите новую строку в таблицу book (текстовые значения (тип VARCHAR) заключать либо в двойные, либо в одинарные кавычки):

INSERT INTO book (title, author, price, amount) 
VALUES ('Мастер и Маргарита',  'Булгаков М.А.', 670.99, 3)
             
1.1.3 Занесите три последние записи в таблицуbook,  первая запись уже добавлена на предыдущем шаге:

INSERT INTO book (title, author, price, amount)
VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 5);
INSERT INTO book (title, author, price, amount)
VALUES ('Идиот', 'Достоевский Ф.М.', 460.00, 10);
INSERT INTO book (title, author, price, amount)
VALUES ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);
SELECT * FROM book;

1.2.4 Для упаковки каждой книги требуется 1 лист бумаги, цена которого 1 рубль 65 копеек. Посчитать стоимость упаковки для каждой книги
(сколько денег потребуется, чтобы упаковать все экземпляры книги). 
В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack. 

SELECT title, 
       amount, 
       amount * 1.65 AS pack 
FROM   book 

1.2.5 В конце года цену всех книг на складе пересчитывают – снижают ее на 30%. Написать SQL запрос, который из таблицы book выбирает названия, авторов, количества и вычисляет новые цены книг. 
Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.

SELECT title, 
       author, 
       amount, 
       ROUND(( price * 0.7 ), 2) AS new_price 
FROM   book

1.2.6 При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина. 
Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%.

SELECT author, 
       title, 
       ROUND(IF(author = 'Булгаков М.А.', price * 1.10, 
                   IF(author = 'Есенин С.А.', price * 1.05, price)), 2) 
       AS new_price 
FROM   book 

1.2.7 Вывести автора, название  и цены тех книг, количество которых меньше 10.

SELECT author, 
       title, 
       price 
FROM   book 
WHERE  amount < 10

1.2.8 Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.

SELECT title, 
       author, 
       price, 
       amount 
FROM   book 
WHERE  ( price < 500 
          OR price > 600 ) 
       AND ( price * amount >= 5000 )

1.2.9 Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  а количество или 2, или 3, или 5, или 7 .

SELECT title, 
       author 
FROM   book 
WHERE  ( price BETWEEN 540.50 AND 800 ) 
       AND ( amount IN ( 2, 3, 5, 7 ) ) 
       
1.2.10 Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С».

SELECT title, 
       author 
FROM   book 
WHERE  ( 
              title LIKE '_% _%') 
AND    ( 
              author LIKE '%С.%'))
              
1.2.11 Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы).

SELECT author, 
       title 
FROM   book 
WHERE  amount BETWEEN 2 AND 14 
ORDER  BY author DESC, title

1.3.3 Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе. 

SELECT author  AS Автор, 
       COUNT(author) AS Различных_книг, 
       SUM(amount)   AS Количество_экземпляров 
FROM   book 
GROUP  BY author 

1.3.4 Вывести минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.

SELECT author, 
       MIN(price) AS Минимальная_цена, 
       MAX(price) AS Максимальная_цена, 
       AVG(price) AS Средняя_цена 
FROM   book 
GROUP  BY author 

1.3.5 Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , 
который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него.

SELECT author, 
       SUM(price * amount)  AS Стоимость, 
       ROUND(( Sum(price * amount) * 0.18 ) / ( 1 + 0.18 ), 2) AS НДС, 
       ROUND(Sum(price * amount) / ( 1 + 0.18 ), 2) AS Стоимость_без_НДС 
FROM   book 
GROUP  BY author 

1.3.6 Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену книг на складе. 

SELECT MIN(price) AS Минимальная_цена, 
       MAX(price) AS Максимальная_цена, 
       ROUND(Avg(price), 2) AS Средняя_цена 
FROM   book 

1.3.7 Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно.

SELECT ROUND(Avg(price), 2) AS Средняя_цена, 
       SUM(price * amount)  AS Стоимость 
FROM   book 
WHERE  amount BETWEEN 5 AND 14 

1.3.8 Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых суммарная стоимость книг более 5000 руб.

SELECT author, 
       SUM(price * amount) AS Стоимость 
FROM   book 
WHERE  title <> 'Идиот' 
       AND title <> 'Белая гвардия' 
GROUP  BY author 
HAVING SUM(price * amount) > 5000 
ORDER  BY Стоимость DESC 

1.4.1 Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе.
Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.

SELECT author, 
       title, 
       price 
FROM   book 
WHERE  price <= (SELECT AVG(price) 
                 FROM   book) 
ORDER  BY price DESC 

1.4.2 Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей 
в отсортированном по возрастанию цены виде.

SELECT author, 
       title, 
       price 
FROM   book 
WHERE  ( price - (SELECT MiIN(price) 
                  FROM   book) <= 150 ) 
ORDER  BY price

1.4.3 Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не повторяется.

SELECT author, 
       title, 
       amount 
FROM   book 
WHERE  amount IN (SELECT amount 
                  FROM   book 
                  GROUP  BY amount 
                  HAVING COUNT(amount) = 1) 
                  
1.4.4 Вывести информацию о книгах(автор, название, цена) только тех авторов, средняя цена книг которых выше, чем средняя цена книг на складе в целом.

SELECT author, 
       title, 
       price 
FROM   book 
WHERE  author IN (SELECT author 
                  FROM   book 
                  GROUP  BY author 
                  HAVING AVG(price) > (SELECT AVG(price) 
                                       FROM   book)) 
                                       
1.4.5 Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе было одинаковое количество экземпляров каждой книги,
равное максимальному значению из всех количеств экземпляров книг, хранящихся на складе. 

SELECT title, 
       author, 
       amount, 
       ( (SELECT MAX(amount) 
          FROM   book) - amount ) AS Заказ 
FROM   book 
WHERE  ( (SELECT MAX(amount) 
          FROM   book) - amount ) > 0
          
1.5.1 Создать таблицу поставка (supply), которая имеет ту же структуру, что и таблица book.

CREATE TABLE supply (
    supply_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL(8, 2),
    amount INT
)

1.5.2 Занесите в таблицу supply четыре записи, чтобы получилась следующая таблица:

INSERT INTO supply (title, author, price, amount)
VALUES ('Лирика', 'Пастернак Б.Л.', 518.99, 2);
INSERT INTO supply (title, author, price, amount)
VALUES ('Черный человек', 'Есенин С.А.', 570.20, 6);
INSERT INTO supply (title, author, price, amount)
VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 7);
INSERT INTO supply (title, author, price, amount)
VALUES ('Идиот', 'Достоевский Ф.М.', 360.80, 3);

1.5.3 Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым и Достоевским.

INSERT INTO book (title, author, price, amount) 
       SELECT title, author, price, amount 
       FROM supply
       WHERE author <> 'Достоевский Ф.М.' AND author <> 'Булгаков М.А.';

SELECT * FROM book;

1.5.4 Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book.

INSERT INTO book (title, author, price, amount) 
       SELECT title, author, price, amount 
       FROM supply
       WHERE author NOT IN (SELECT author from book);

SELECT * FROM book;

1.5.5 Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10 включительно.

UPDATE book 
SET    price = 0.9 * price 
WHERE  amount BETWEEN 5 AND 10; 

SELECT * FROM  book; 

1.5.6 В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало допустимый остаток в столбце amount. 
А цену тех книг, которые покупатель не заказывал, снизить на 10%, округлив полученную цену до двух знаков после запятой.

UPDATE book 
SET    buy = IF(buy > amount, amount, buy); 

UPDATE book 
SET    price = 0.9 * price 
WHERE  buy = 0; 

SELECT * FROM  book; 

1.5.7 Для одинаковых книг в таблицах book и supply не только увеличить их количество в таблице book( увеличить их количество на значение столбца amountтаблицы supply),
но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).

UPDATE book, supply SET book.amount = book.amount + supply.amount
WHERE book.title = supply.title AND book.author = supply.author;

UPDATE book, supply SET book.price = (book.price + supply.price) / 2
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;

1.5.8 Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.

DELETE FROM supply 
WHERE  author IN (SELECT author 
                  FROM   book 
                  GROUP  BY author 
                  HAVING Sum(amount) > 10); 

SELECT * FROM  supply;

1.5.9 Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. 
Для всех книг указать одинаковое значение  amount - среднее количество экземпляров книг в таблице book.

CREATE TABLE ordering AS 
  SELECT author, 
         title, 
         (SELECT ROUND(AVG(amount)) 
          FROM   book) AS amount 
  FROM   book 
  WHERE  amount < (SELECT ROUND(AVG(amount)) 
                   FROM   book); 

SELECT * FROM  ordering; 

1.6.1 Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде

SELECT NAME, 
       city, 
       per_diem, 
       date_first, 
       date_last 
FROM   trip 
WHERE  NAME LIKE '%а %' 
ORDER  BY date_last DESC 

1.6.2 Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.

SELECT DISTINCT NAME 
FROM   trip 
WHERE  city = 'Москва' 
ORDER  BY NAME 

1.6.3 Для каждого города посчитать, сколько раз сотрудники в нем были.  Информацию вывести в отсортированном в алфавитном порядке по названию городов. 

SELECT city, 
       COUNT(city) AS Количество 
FROM   trip 
GROUP  BY city 
ORDER  BY city 

1.6.4 Вывести два города, в которых чаще всего были в командировках сотрудники. 

SELECT city, 
       COUNT(city) AS Количество 
FROM   trip 
GROUP  BY city 
ORDER  BY Количество  DESC 
LIMIT  2 

1.6.5 Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки).

SELECT NAME, 
       city, 
       ( Datediff(date_last, date_first) + 1 ) AS Длительность 
FROM   trip 
WHERE  city NOT IN ( 'Москва', 'Санкт-Петербург' ) 
ORDER  BY  Длительность  DESC, city DESC 

1.6.6 Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени.

SELECT NAME, 
       city, 
       date_first, 
       date_last 
FROM   trip 
WHERE  Datediff(date_last, date_first) = (SELECT MIN(Datediff(date_last, 
                                                     date_first)) 
                                          FROM   trip) 
                                          
1.6.7 Вывести информацию о командировках, начало и конец которых относятся к одному месяцу. 

SELECT NAME, 
       city, 
       date_first, 
       date_last 
FROM   trip 
WHERE  MONTH(date_first) = MONTH(date_last) 
ORDER  BY city, NAME 

1.6.8 Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. 

SELECT MONTHNAME(date_first) AS Месяц, 
       COUNT(MONTHNAME(date_first)) AS Количество 
FROM   trip 
GROUP  BY MONTHNAME(date_first) 
ORDER  BY Месяц DESC, Количество 

1.6.9 Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. 

SELECT NAME, 
       city, 
       date_first, 
       ( ( Datediff(date_last, date_first) + 1 ) * per_diem ) AS Сумма 
FROM   trip 
WHERE  MONTH(date_first) IN ( 2, 3 ) 
ORDER  BY NAME, Сумма DESC 

1.7.1 Создать таблицу fine следующей структуры:

CREATE TABLE fine
    (
        fine_id INT PRIMARY KEY AUTO_INCREMENT,
        name varchar(30),
        number_plate varchar(6),
        violation varchar(50),
        sum_fine decimal(8, 2),
        date_violation date,
        date_payment date
    );
    
1.7.2 В таблицу fine первые 5 строк уже занесены. Добавить в таблицу записи с ключевыми значениями 6, 7, 8.

INSERT INTO fine(name,number_plate,violation,sum_fine,date_violation,date_payment)
VALUES('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14', NULL);
INSERT INTO fine(name,number_plate,violation,sum_fine,date_violation,date_payment)
VALUES('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL);
INSERT INTO fine(name,number_plate,violation,sum_fine,date_violation,date_payment)
VALUES('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL)

1.7.3 Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца  sum_fine.

UPDATE fine, 
       traffic_violation 
SET    fine.sum_fine = IF(fine.sum_fine IS NULL, (SELECT sum_fine 
                                                  FROM   traffic_violation 
                                                  WHERE 
                              fine.violation = traffic_violation.violation), 
                                              fine.sum_fine); 

SELECT * FROM  fine;

1.7.4 Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. 

SELECT NAME, 
       number_plate, 
       violation 
FROM   fine 
GROUP  BY NAME, 
          number_plate, 
          violation 
HAVING COUNT(number_plate) >= 2 

1.7.5 В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей. 

UPDATE fine, 
       (SELECT NAME, 
               number_plate, 
               violation 
        FROM   fine 
        GROUP  BY NAME, 
                  number_plate, 
                  violation 
        HAVING COUNT(number_plate) > 1) AS query_in 
SET    fine.sum_fine = fine.sum_fine * 2 
WHERE  fine.date_payment IS NULL 
       AND fine.NAME = query_in.NAME; 

SELECT * ;FROM  fine 

1.7.6 Водители оплачивают свои штрафы. В таблице payment занесены даты их оплаты

UPDATE fine, 
       payment 
SET    fine.date_payment = payment.date_payment, 
       fine.sum_fine = IF(DATEDIFF(payment.date_payment, fine.date_violation) 
                          - 1 <= 20 , 
                                       fine.sum_fine / 2, fine.sum_fine) 
WHERE  fine.name = payment.name 
       AND fine.number_plate = payment.number_plate 
       AND fine.violation = payment.violation 
       AND fine.date_payment IS NULL; 

SELECT * FROM  fine 

1.7.7 Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа  и  дату нарушения) из таблицы fine.

CREATE TABLE back_payment AS 
  SELECT NAME, 
         number_plate, 
         violation, 
         sum_fine, 
         date_violation 
  FROM   fine 
  WHERE  date_payment IS NULL; 

SELECT * FROM  back_payment; 
                  
2.2.1 Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.

SELECT title, 
       name_genre, 
       price 
FROM   book 
       INNER JOIN genre 
               ON book.genre_id = genre.genre_id 
WHERE  amount > 8 
ORDER  BY price DESC 

2.2.2. Вывести все жанры, которые не представлены в книгах на складе.

SELECT name_genre 
FROM   genre 
       LEFT JOIN book 
              ON genre.genre_id = book.genre_id 
WHERE  title IS NULL 

2.2.3 Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. Создать запрос, который выведет город, автора и дату проведения выставки. 

SELECT name_city, 
       name_author, 
       DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND() * 365) day) AS Дата 
FROM   city, 
       author 
ORDER  BY name_city, 
          Дата DESC 
          
2.2.4 Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово «роман» в отсортированном по названиям книг виде.

SELECT name_genre, 
       title, 
       name_author 
FROM   genre 
       INNER JOIN book 
               ON genre.genre_id = book.genre_id 
       INNER JOIN author 
               ON book.author_id = author.author_id 
WHERE  name_genre = 'Роман' 
ORDER  BY title 

2.2.5 Посчитать количество экземпляров  книг каждого автора на складе.  Вывести тех авторов,  количество книг которых меньше 10, в отсортированном по возрастанию количества виде.

SELECT name_author, 
       SUM(amount) AS Количество 
FROM   author 
       LEFT JOIN book 
              ON author.author_id = book.author_id 
GROUP  BY name_author 
HAVING SUM(amount) < 10 
        OR COUNT(title) = 0 
ORDER  BY Количество 

2.2.6 Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. 
Поскольку у нас в таблицах так занесены данные, что у каждого автора книги только в одном жанре,  для этого запроса внесем изменения в таблицу book. 
Пусть у нас  книга Есенина «Черный человек» относится к жанру «Роман», а книга Булгакова «Белая гвардия» к «Приключениям»

SELECT name_author 
FROM   author 
WHERE  author_id IN (SELECT author_id 
                     FROM   (SELECT author_id, 
                                    genre_id 
                             FROM   book 
                             GROUP  BY author_id, 
                                       genre_id) query_in 
                     GROUP  BY author_id 
                     HAVING COUNT(genre_id) = 1) 
                     
2.2.7 Вывести информацию о книгах, написанных в самых популярных жанрах, в отсортированном в алфавитном порядке по названию книг виде.

SELECT title, 
       name_author, 
       genre_name.name_genre, 
       price, 
       amount 
FROM   book 
       INNER JOIN author 
               ON author.author_id = book.author_id 
       INNER JOIN (SELECT genre.genre_id, 
                          genre.name_genre 
                   FROM   (SELECT genre_id, 
                                  SUM(amount) AS sum_amount 
                           FROM   book 
                           GROUP  BY genre_id 
                           HAVING sum_amount >= MAX(sum_amount)) AS pop_genre 
                          JOIN genre 
                            ON genre.genre_id = pop_genre.genre_id) AS 
                  genre_name 
               ON book.genre_id = genre_name.genre_id 
ORDER  BY title 

2.2.8 Если в таблицах supply  и book есть одинаковые книги, которые имеют равную цену,  вывести их название и автора, а также посчитать общее количество экземпляров книг в таблицах supply и book.

SELECT book.title  AS Название, 
       name_author  AS Автор, 
       ( book.amount + supply.amount ) AS Количество 
FROM   author 
       JOIN book using(author_id) 
       JOIN supply 
         ON book.title = supply.title 
WHERE  book.price = supply.price 

2.3.1 Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),  
необходимо в таблице book увеличить количество на значение, указанное в поставке,  и пересчитать цену. А в таблице  supply обнулить количество этих книг.

UPDATE book 
       INNER JOIN author 
               ON book.author_id = author.author_id 
       INNER JOIN supply 
               ON book.title = supply.title 
                  AND supply.author = author.name_author 
SET    book.price = IF(book.price <> supply.price, ( book.price * book.amount + 
                                        supply.price * supply.amount ) / ( 
book.amount + 
supply.amount ), book.price), book.amount = book.amount + supply.amount, 
supply.amount = 0 
WHERE  book.price <> supply.price; 

SELECT * FROM book; 

SELECT * FROM  supply; 

2.3.2 Включить новых авторов в таблицу author с помощью запроса на добавление, а затем вывести все данные из таблицы author.  
Новыми считаются авторы, которые есть в таблице supply, но нет в таблице author.

INSERT INTO author 
            (name_author) 
SELECT supply.author 
FROM   author 
       RIGHT JOIN supply 
               ON author.name_author = supply.author 
WHERE  name_author IS NULL; 

2.3.3 Добавить новые книги из таблицы supply в таблицу book на основе сформированного выше запроса. Затем вывести для просмотра таблицу book.

INSERT INTO book 
            (title, 
             author_id, 
             price, 
             amount) 
SELECT title, 
       author_id, 
       price, 
       amount 
FROM   author 
       INNER JOIN supply 
               ON author.name_author = supply.author 
WHERE  amount <> 0; 

2.3.4  Занести для книги «Стихотворения и поэмы» Лермонтова жанр «Поэзия», а для книги «Остров сокровищ» Стивенсона - «Приключения». (Использовать два запроса).

UPDATE book
SET genre_id = 2
WHERE book_id = 10;

UPDATE book
SET genre_id = 3
WHERE book_id = 11;

2.3.5 Удалить всех авторов и все их книги, общее количество книг которых меньше 20.

DELETE FROM author 
WHERE  author_id IN (SELECT author_id 
                     FROM   book 
                     GROUP  BY author_id 
                     HAVING Sum(amount) < 20); 
                     
2.3.6 Удалить все жанры, количество различных книг в которых меньше 3. В таблицу book для этих жанров установить значение Null

DELETE FROM genre 
WHERE  genre_id IN (SELECT genre_id 
                    FROM   book 
                    GROUP  BY genre_id 
                    HAVING Count(amount) < 3); 
                    
2.3.8 Удалить всех авторов, которые пишут в жанре "Поэзия". Из таблицы book удалить все книги этих авторов. В запросе для отбора авторов использовать полное название жанра, а не его id.

DELETE 
FROM  author 
USING   author INNER JOIN book 
ON    author.author_id = book.author_id 
WHERE   book.genre_id IN 
           ( 
                  SELECT genre_id 
                  FROM   genre 
                  WHERE  name_genre = "Поэзия");
                  
2.4.1 Вывести все заказы Баранова Павла (какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.

SELECT buy.buy_id, 
       title, 
       price, 
       buy_book.amount 
FROM   book 
       INNER JOIN buy_book USING (book_id) 
       INNER JOIN buy USING  (buy_id) 
       INNER JOIN client USING  (client_id) 
WHERE  name_client = 'Баранов Павел' 
ORDER  BY buy.buy_id 

2.4.2 Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком количестве заказов фигурирует каждая книга).

SELECT name_author, 
       title, 
       COUNT(buy_book.amount) AS Количество 
FROM   author 
       RIGHT JOIN book USING (author_id) 
       LEFT JOIN buy_book USING (book_id) 
GROUP  BY name_author,  title 
ORDER  BY name_author,  title 

2.4.3 Вывести города, в которых живут клиенты, оформлявшие заказы в интернет-магазине. Указать количество заказов в каждый город.

SELECT name_city, 
       COUNT(client_id) AS Количество 
FROM   city 
       JOIN client USING (city_id) 
       JOIN buy USING (client_id) 
GROUP  BY name_city 
ORDER  BY Количество  DESC, name_city 

2.4.4 Вывести номера всех оплаченных заказов и даты, когда они были оплачены.

SELECT buy_id, 
       date_step_end 
FROM   buy_step 
WHERE  buy_step.step_id = 1 
       AND date_step_end IS NOT NULL 
       
2.4.5 Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма произведений количества заказанных книг и их цены).

SELECT buy.buy_id, 
       name_client, 
       Sum(book.price * buy_book.amount) AS Стоимость 
FROM   client 
       JOIN buy USING (client_id) 
       JOIN buy_book USING (buy_id) 
       JOIN book USING (book_id) 
GROUP  BY buy.buy_id, 
          name_client 
ORDER  BY buy.buy_id 

2.4.6 Вывести все заказы и названия этапов, на которых они в данный момент находятся. Если заказ доставлен –  информацию о нем не выводить.

SELECT DISTINCT buy_id, 
                name_step 
FROM   step 
       JOIN buy_step USING(step_id) 
WHERE  date_step_end IS NULL 
       AND date_step_beg IS NOT NULL 
ORDER  BY buy_id 

2.4.7 Для тех заказов, которые прошли этап транспортировки, вывести количество дней за которое заказ реально доставлен в город. 
А также, если заказ доставлен с опозданием, указать количество дней задержки, в противном случае вывести 0. 

SELECT buy.buy_id, 
       DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) AS 
       Количество_дней, 
       IF(city.days_delivery - DATEDIFF(buy_step.date_step_end, 
                               buy_step.date_step_beg) >= 
          0, 0, DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) - 
                city.days_delivery) AS Опоздание 
FROM   city 
       JOIN client 
         ON client.city_id = city.city_id 
       JOIN buy 
         ON buy.client_id = client.client_id 
       JOIN buy_step 
         ON buy_step.buy_id = buy.buy_id 
WHERE  buy_step.step_id = 3 
       AND buy_step.date_step_end IS NOT NULL 
ORDER  BY buy.buy_id 

2.4.8 Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту виде.

SELECT name_client 
FROM   client 
       JOIN buy USING (client_id) 
       JOIN buy_book USING (buy_id) 
       JOIN book USING (book_id) 
       JOIN author USING (author_id) 
WHERE  name_author LIKE '%Достоев%' 
ORDER  BY name_client 

2.4.9 Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество .

SELECT name_genre, 
       SUM(buy_book.amount) AS Количество 
FROM   genre 
       JOIN book USING (genre_id) 
       JOIN buy_book USING (book_id) 
GROUP  BY name_genre 
HAVING SUM(buy_book.amount) = (SELECT 
       MAX(Количество) AS max_Количество 
                               FROM   (SELECT 
              genre_id, 
              SUM(buy_book.amount) AS Количество 
                                       FROM   book 
                                              INNER JOIN buy_book USING(book_id) 
                                       GROUP  BY genre_id) AS query1); 
                                       
2.4.10 Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы.

SELECT Year(date_payment) AS Год, 
       MONTHNAME(date_payment)  AS Месяц, 
       Sum(price * buy_archive.amount) AS Сумма 
FROM   buy_archive 
GROUP  BY Year(date_payment), 
          MONTHNAME(date_payment) 
UNION 
SELECT Year(date_step_end) AS Год, 
       MONTHNAME(date_step_end) AS Месяц, 
       Sum(price * buy_book.amount) AS Сумма 
FROM   book 
       INNER JOIN buy_book USINGg(book_id) 
       INNER JOIN buy USING(buy_id) 
       INNER JOIN buy_step USING(buy_id) 
       INNER JOIN step USING(step_id) 
WHERE  date_step_end IS NOT NULL 
       AND name_step = "Оплата" 
GROUP  BY Year(date_step_end), 
          MONTHNAME(date_step_end) 
ORDER  BY Месяц

2.5.1 Включить нового человека в таблицу с клиентами. Его имя Попов Илья, его email popov@test, проживает он в Москве.

INSERT INTO client (name_client, city_id, email)
    SELECT 'Попов Илья', city_id, 'popov@test'
    FROM city
    WHERE name_city = 'Москва';

2.5.2 Создать новый заказ для Попова Ильи. Его комментарий для заказа: «Связаться со мной по вопросу доставки».

INSERT INTO buy(buy_description, client_id)
    SELECT 'Связаться со мной по вопросу доставки', client_id
    FROM client
    WHERE name_client = 'Попов Илья';
    
2.5.3 В таблицу buy_book добавить заказ с номером 5. Этот заказ должен содержать книгу Пастернака «Лирика» в количестве двух экземпляров и книгу Булгакова «Белая гвардия» в одном экземпляре.

INSERT INTO buy_book(buy_id, book_id, amount)
    SELECT 5, book_id, 2
    FROM book
    WHERE title = 'Лирика';

INSERT INTO buy_book(buy_id, book_id, amount)
    SELECT 5, book_id, 1
    FROM book
    WHERE title = 'Белая Гвардия';
    
2.5.4 Количество тех книг на складе, которые были включены в заказ с номером 5, уменьшить на то количество, которое в заказе с номером 5  указано.

UPDATE book 
       JOIN buy_book using(book_id) 
SET    book.amount = book.amount - buy_book.amount 
WHERE  buy_book.buy_id = 5;

2.5.5 Создать счет (таблицу buy_pay) на оплату заказа с номером 5, в который включить название книг, их автора, цену, количество заказанных книг и  стоимость.

CREATE TABLE buy_pay AS 
  SELECT title, 
         name_author, 
         price, 
         buy_book.amount, 
         price * buy_book.amount AS Стоимость 
  FROM   author 
         JOIN book USING(author_id) 
         JOIN buy_book USING(book_id) 
  WHERE  buy_id = 5 
  ORDER  BY title; 
  
2.5.6 Создать общий счет (таблицу buy_pay) на оплату заказа с номером 5. Куда включить номер заказа, количество книг в заказе и его общую стоимость. 
Для решения используйте ОДИН запрос.  

CREATE TABLE buy_pay AS 
  SELECT buy_id, 
         Sum(buy_book.amount)  AS Количество, 
         Sum(book.price * buy_book.amount) AS Итого 
  FROM   buy_book 
         JOIN book USING(book_id) 
  WHERE  buy_id = 5; 
  
2.5.7 В таблицу buy_step для заказа с номером 5 включить все этапы из таблицы step, которые должен пройти этот заказ. 
В столбцы date_step_beg и date_step_end всех записей занести Null.  

INSERT INTO buy_step 
            (buy_step.buy_id, 
             step_id) 
SELECT buy_id, 
       step_id 
FROM   buy 
       CROSS JOIN step 
WHERE  buy_id = 5; 

2.5.8 В таблицу buy_step занести дату 12.04.2020 выставления счета на оплату заказа с номером 5.

UPDATE buy_step
SET date_step_beg='2020-04-12'
WHERE buy_id=5 and step_id=1;

2.5.9 Завершить этап «Оплата» для заказа с номером 5, вставив в столбец date_step_end дату 13.04.2020, и начать следующий этап («Упаковка»), 
задав в столбце date_step_beg для этого этапа ту же дату.

UPDATE buy_step
SET date_step_end='2020-04-13'
WHERE buy_id=5 AND step_id=1;

UPDATE buy_step
SET date_step_beg='2020-04-13'
WHERE buy_id=5 AND step_id=2;
