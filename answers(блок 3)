3.1.1 Вывести студентов, которые сдавали дисциплину «Основы баз данных», указать дату попытки и результат. 

SELECT name_student, 
       date_attempt, 
       result 
FROM   attempt 
       JOIN student USING (student_id) 
       JOIN subject USING (subject_id) 
WHERE  name_subject = 'Основы баз данных' 
ORDER  BY result DESC

3.1.2 Вывести, сколько попыток сделали студенты по каждой дисциплине, а также средний результат попыток, который округлить до 2 знаков после запятой. 
Под результатом попытки понимается процент правильных ответов на вопросы теста, который занесен в столбец result. 

SELECT name_subject, 
       COUNT(attempt_id) AS Количество, 
       ROUND(AVG(result), 2) AS Среднее 
FROM   attempt 
       RIGHT JOIN subject USING (subject_id) 
GROUP  BY name_subject 
ORDER  BY Среднее DESC 

3.1.3 Вывести студента (различных студентов), имеющих максимальные результаты попыток. Информацию отсортировать в алфавитном порядке по фамилии студента.

SELECT name_student, 
       result 
FROM   student 
       JOIN attempt USING (student_id) 
WHERE  result IN(SELECT MAX(result) 
                 FROM   attempt) 
ORDER  BY name_student 

3.1.4 Если студент совершал несколько попыток по одной и той же дисциплине, то вывести разницу в днях между первой и последней попыткой. Информацию вывести по возрастанию разницы. 
Студентов, сделавших одну попытку по дисциплине, не учитывать. 

SELECT name_student, 
       name_subject, Datediff(Max(date_attempt), Min(date_attempt)) AS Интервал
FROM   attempt 
       JOIN student 
         ON student.student_id = attempt.student_id 
       JOIN subject 
         ON subject.subject_id = attempt.subject_id 

GROUP BY name_student, name_subject 
HAVING Count(*) > 1 
ORDER  BY Интервал

3.1.5 Студенты могут тестироваться по одной или нескольким дисциплинам (не обязательно по всем). Вывести дисциплину и количество студентов, которые по ней проходили тестирование .

SELECT name_subject, 
       Count(DISTINCT student_id) AS Количество 
FROM   attempt 
       RIGHT JOIN subject USING (subject_id) 
GROUP  BY name_subject 
ORDER  BY Количество  DESC, name_subject 

3.1.6 Случайным образом отберите 3 вопроса по дисциплине «Основы баз данных».

SELECT question_id, 
       name_question 
FROM   question 
       JOIN subject USING(subject_id) 
WHERE  name_subject = 'Основы баз данных' 
ORDER  BY RAND() 
LIMIT  3 

3.1.7 Вывести вопросы, которые были включены в тест для Семенова Ивана по дисциплине «Основы SQL» 2020-05-17  (значение attempt_id для этой попытки равно 7). 
Указать, какой ответ дал студент и правильный он или нет. 

SELECT name_question, 
       name_answer, 
       IF(is_correct, 'Верно', 'Неверно') AS Результат 
FROM   question 
       JOIN testing USING(question_id) 
       JOIN answer USING(answer_id) 
WHERE  attempt_id = 7 

3.1.8 Посчитать результаты тестирования. Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100.

SELECT name_student, 
       name_subject, 
       date_attempt, 
       Round(Sum(is_correct) / 3 * 100, 2) AS Результат 
FROM   subject 
       JOIN attempt USING (subject_id) 
       JOIN student USING (student_id) 
       JOIN testing USING (attempt_id) 
       JOIN answer 
         ON testing.answer_id = answer.answer_id 
GROUP  BY name_student, name_subject, date_attempt 
ORDER  BY name_student,  date_attempt DESC 

3.1.9 Для каждого вопроса вывести процент успешных решений, то есть отношение количества верных ответов к общему количеству ответов, значение округлить до 2-х знаков после запятой. 
Также вывести название предмета, к которому относится вопрос, и общее количество ответов на этот вопрос.

SELECT name_subject, 
       CONCAT(LEFT(name_question, 30), '...')  AS Вопрос, 
       COUNT(answer_id) AS Всего_ответов, 
       ROUND(SUM(is_correct) / Count(answer_id) * 100, 2) AS Успешность 
FROM   subject 
       JOIN question USING (subject_id) 
       JOIN testing USING (question_id) 
       JOIN answer USING (answer_id) 
GROUP  BY name_subject, Вопрос
ORDER  BY name_subject, Успешность DESC, Вопрос

3.2.1 В таблицу attempt включить новую попытку для студента Баранова Павла по дисциплине «Основы баз данных». Установить текущую дату в качестве даты выполнения попытки.

INSERT INTO attempt 
            (student_id, 
             subject_id, 
             date_attempt) 
SELECT student_id, 
       subject_id, 
       NOW() 
FROM   attempt 
       JOIN student USING (student_id) 
       JOIN subject USING (subject_id) 
WHERE  student_id = 1 
       AND subject_id = 2; 
       
3.2.2 Случайным образом выбрать три вопроса (запрос) по дисциплине, тестирование по которой собирается проходить студент, занесенный в таблицу attempt последним, и добавить их в таблицу testing. 
id последней попытки получить как максимальное значение id из таблицы attempt. 

INSERT INTO testing 
            (attempt_id, 
             question_id) 
SELECT attempt_id, 
       question.question_id 
FROM   question 
       JOIN subject 
         ON subject.subject_id = question.subject_id 
       JOIN attempt 
         ON attempt.subject_id = question.subject_id 
WHERE  subject.subject_id = 2 
       AND attempt_id = (SELECT MAX(attempt_id) 
                         FROM   attempt) 
ORDER  BY RAND() 
LIMIT  3 

3.2.3 Студент прошел тестирование (то есть все его ответы занесены в таблицу testing), далее необходимо вычислить результат(запрос) и занести его в таблицу attempt для соответствующей попытки. 

UPDATE attempt 
SET    result = (SELECT ROUND(SUM(is_correct) / 3 * 100, 2) AS res 
                 FROM   answer 
                        JOIN testing USING(answer_id) 
                 WHERE  attempt_id = 8) 
WHERE  attempt_id = 8; 

3.2.4 Удалить из таблицы attempt все попытки, выполненные раньше 1 мая 2020 года. Также удалить и все соответствующие этим попыткам вопросы из таблицы testing.

DELETE FROM attempt
WHERE date_attempt < '2020-05-01';

3.3.1 SELECT name_enrollee 
FROM   enrollee 
       JOIN program_enrollee USING (enrollee_id) 
       JOIN program USING (program_id) 
WHERE  name_program LIKE '%робот%' 
ORDER  BY name_enrollee 

3.3.2 ывести образовательные программы, на которые для поступления необходим предмет «Информатика».

SELECT name_program 
FROM   program 
       JOIN program_subject USING (program_id) 
       JOIN subject USING (subject_id) 
WHERE  name_subject = 'Информатика' 

3.3.3 Выведите количество абитуриентов, сдавших ЕГЭ по каждому предмету, максимальное, минимальное и среднее значение баллов по предмету ЕГЭ. 

SELECT name_subject,
    COUNT(enrollee_id) AS Количество,
    MAX(result) AS Максимум,
    MIN(result) AS Минимум,
    ROUND(AVG(result), 1) AS Среднее
FROM enrollee_subject
JOIN subject USING(subject_id)
GROUP BY name_subject
ORDER BY name_subject

3.3.4 Вывести образовательные программы, для которых минимальный балл ЕГЭ по каждому предмету больше или равен 40 баллам.

SELECT DISTINCT name_program 
FROM   program 
       JOIN program_subject 
         ON program.program_id = program_subject.program_id 
GROUP  BY name_program 
HAVING MIN(min_result) >= 40 
ORDER  BY name_program 

3.3.5 Вывести образовательные программы, которые имеют самый большой план набора,  вместе с этой величиной.

SELECT name_program, 
       plan 
FROM   program 
WHERE  PLAN = (SELECT MAX(plan) 
               FROM   program) 
               
3.3.6 Посчитать, сколько дополнительных баллов получит каждый студент. Информацию вывести в отсортированном по фамилиям виде.

SELECT name_enrollee, 
       IFNULL(SUM(bonus), 0) AS Бонус 
FROM   enrollee 
       LEFT JOIN enrollee_achievement USING (enrollee_id) 
       LEFT JOIN achievement USING (achievement_id) 
GROUP  BY enrollee_id 
ORDER  BY name_enrollee 

3.3.7 Выведите сколько человек подало заявление на каждую образовательную программу и конкурс на нее.

SELECT name_department, 
       program.name_program, 
       plan, 
       COUNT(*) AS Количество, 
       ROUND(COUNT(*) / plan, 2) AS Конкурс 
FROM   program_enrollee 
       JOIN program 
         ON program_enrollee.program_id = program.program_id 
       JOIN department 
         ON department.department_id = program.department_id 
GROUP  BY name_department,  program.name_program, plan
ORDER  BY plan,  name_program DESC 

3.3.8 Вывести образовательные программы, на которые для поступления необходимы предмет «Информатика» и «Математика» в отсортированном по названию программ виде.

SELECT program.name_program 
FROM   subject 
       JOIN program_subject 
         ON subject.subject_id = program_subject.subject_id 
       JOIN program 
         ON program.program_id = program_subject.program_id 
WHERE  name_subject IN ( 'Математика', 'Информатика' ) 
GROUP  BY name_program 
HAVING COUNT(*) = 2 
ORDER  BY name_program 

3.3.9 Посчитать количество баллов каждого абитуриента на каждую образовательную программу, на которую он подал заявление, по результатам ЕГЭ. 
В отсортированном сначала по образовательной программе, а потом по убыванию суммы баллов виде.

SELECT name_program,
       name_enrollee,
       SUM(result) AS itog
FROM   enrollee
       JOIN program_enrollee using(enrollee_id)
       JOIN program using(program_id)
       JOIN program_subject using(program_id)
       JOIN subject
         ON program_subject.subject_id = subject.subject_id
       JOIN enrollee_subject
         ON subject.subject_id = enrollee_subject.subject_id
            AND enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP  BY name_program, name_enrollee
ORDER  BY name_program, itog DESC 

